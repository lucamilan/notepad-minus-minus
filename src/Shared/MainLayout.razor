@inherits LayoutComponentBase
@inject EventNotifier Notifier
@inject IConfiguration Config
@inject ILogger<MainLayout> Log
@implements IDisposable

<MudThemeProvider Theme="_theme" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Small" />
<MudSnackbarProvider />
<AppOverlay IsLoading="_isLoading"></AppOverlay>
<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h4" Class="ml-3">Notepad</MudText>
        <MudText Typo="Typo.h3" Class="ml-3">- -</MudText>
        <MudSpacer />

        <MudElement HtmlTag="span" Class="ma-0" Style="font-weight:bold;">
            @Config["AppBar_Message"]
        </MudElement>

        <MudSwitch Checked="_autosaveEnabled" CheckedChanged="OnAutoSaveEnabledChanged" T="bool" Color="Color.Primary"
            Label="Autosave" LabelPosition="LabelPosition.Start" />
        <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" T="bool" Label="Dark Mode"
            LabelPosition="LabelPosition.Start" />
        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Inherit" Edge="Edge.End" OnClick="OnSaveAllClick"
            Size="Size.Large" Title="Save all notes" />
        @* <MudIconButton Href="https://github.com/lucamilan/notepad-minus-minus" Icon="@Icons.Custom.Brands.GitHub"
            Color="Color.Inherit" Edge="Edge.End" /> *@
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column py-3 gap-1">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    private MudTheme _theme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Brown.Default,
            Secondary = Colors.DeepOrange.Accent4,
            AppbarBackground = Colors.Grey.Default,
        },

        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Brown.Lighten1
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        }
    };
    private bool _autosaveEnabled { get; set; } = false;
    private bool _isDarkMode = false;
    private bool _isLoading = true;

    protected override void OnInitialized()
    {
        Notifier.ShowSpinner += OnShowSpinner;
        Notifier.AutoSaveEnabled += OnAutoSaveEnabled;
    }

    public void Dispose()
    {
        Notifier.AutoSaveEnabled -= OnAutoSaveEnabled;
        Notifier.ShowSpinner -= OnShowSpinner;
        Log.LogInformation($"Dispose was called");
    }

    private async Task OnAutoSaveEnabled(bool value)
    {
        _autosaveEnabled = value;
        await InvokeAsync(StateHasChanged);
        Log.LogInformation($"OnAutoSaveEnabled was invoked outside MainLayout");
    }

    private async Task OnShowSpinner(bool value)
    {
        Log.LogInformation($"OnShowSpinner was invoked outside MainLayout");
        _isLoading = value;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSaveAllClick(MouseEventArgs args)
    {
        await Notifier.SaveAllAsync();
        Log.LogInformation($"OnSaveAllClick was invoked from MainLayout");
    }

    private async Task OnAutoSaveEnabledChanged(bool value)
    {
        _autosaveEnabled = value;
        await Notifier.AutoSaveEnabledAsync(value);
        Log.LogInformation($"OnAutoSaveEnabledChanged was invoked from MainLayout");
    }
}
